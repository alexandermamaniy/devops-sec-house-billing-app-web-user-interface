name: Build release Docker image

on:
  workflow_dispatch:
  push:
    branches:
      - 'staging/**'

env:
  DOCKER_IMAGE_NAME: house_billing_nginx_service
  DOCKER_REGISTRY_URL: x23329823

jobs:

  tests_cases_and_sonarqube:
    name: Execute House billing interface tests and generate the coverage file, then execute the SonarScan and update the coverage file to SonarQube instance in AWS

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install node Dependencies
        run: npm install

      - name: Execute angular test cases and generate coverage report
        run: npm run test:headless

      - name: Execute sonar scan and publish the report
        run: npm run sonar-scanner -- -Dsonar.login=${{ secrets.SONAR_TOKEN }}


  build_docker_images:

    name: Build House billing interface Docker Image and then publish it to docker hub registry

    # Runner to use
    runs-on: ubuntu-latest
    needs: tests_cases_and_sonarqube
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Get the branch name
      id: strip-branch-name-staging
      run: staging_branch_name=$(echo "${{ github.ref }}" | sed 's|refs/heads/||') && echo "Building staging branch name $staging_branch_name" && echo "STAGING_BRANCH_NAME=$staging_branch_name" >> $GITHUB_ENV

    - name: Get the release version
      # i.e.: release/1.0.0 -> 1.0.0
      id: strip-branch-name
      run: release_version=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/.*\///') && echo "Building release version $release_version" && echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

    # Docker Login
    - name: Login to Docker hub
      run: docker login -u x23329823 -p password23329823

    # Build the Docker image
    - name: Build the Docker image
      run: docker build --build-arg STAGING_BRANCH_NAME=$STAGING_BRANCH_NAME --build-arg TOKEN_GITHUB=${{ secrets.TOKEN_GITHUB }}  --file Dockerfile-nginx.staging --tag $DOCKER_IMAGE_NAME:$RELEASE_VERSION --no-cache .

    # Tag the Docker Images
    - name: Tag the image for the registry
      run: docker tag $DOCKER_IMAGE_NAME:$RELEASE_VERSION $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:$RELEASE_VERSION

    - name: Create a latest image as well
      run: docker tag $DOCKER_IMAGE_NAME:$RELEASE_VERSION $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:latest

    # Push the images to the registry
    - name: Push the Docker image with version number
      run: docker push $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:$RELEASE_VERSION

    - name: Push the latest tag
      run: docker push $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:latest

    # Remove the local images
    - name: Remove the Docker image with version number
      run: docker rmi $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:$RELEASE_VERSION

    - name: Remove the Docker image with latest tag
      run: docker rmi $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:latest

    - name: Remove the local image
      run: docker rmi $DOCKER_IMAGE_NAME:$RELEASE_VERSION

  create-pull-request-to-pre-production:

    name: Make a pull request to Main branch to deploy the new feature to production servers
    needs: build_docker_images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update AUTHORS
        run: |
          git log --format='%aN <%aE>%n%cN <%cE>' | sort -u > AUTHORS

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          commit-message: Automated request to ${{ github.event.workflow_run.head_commit.message }}
          title: Update $STAGING_BRANCH_NAME branch to main branch
          body: $STAGING_BRANCH_NAME - ${{ github.event.workflow_run.head_commit.message }}
          branch: main
